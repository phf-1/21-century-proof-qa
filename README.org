* How to Write a 21st Century Proof
:PROPERTIES:
:ID:       d8e71b6f-c3b0-411d-8bd8-b7a45eec561a
:END:

** License

"How to Write a 21st Century Proof" Â© 2025 by Pierre-Henry FROHRING is licensed under
Creative Commons Attribution-ShareAlike 4.0 International. To view a copy of this
license, visit https://creativecommons.org/licenses/by-sa/4.0/

** Use

1. Open Emacs.
2. Install ~total-recall~ (https://melpa.org/#/total-recall).
3. ~M-x total-recall~

** Contribute

1. Fork the repository.
2. Make changes.
3. Submit a pull request.

** Resources

- https://lamport.azurewebsites.net/pubs/proof.pdf

** Introduction
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: aa100eb2-93e7-4a97-bee5-ddbcdd8668fb
:END:

*** How can proofs be made easier to understand?

*** Answer

1. It requires the simple application of two principles: structure and naming.
2. Naming clarifies:
   1. Which assertion is new or justifies a previous assertion.
   2. Which assertion is obviously true or will be proved.
3. Structuring allows us to add detailed explanations without obscuring the broader
   picture.

** Example
*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 9272bd8a-0d21-4a3e-a02c-c0b0d05ddce1
:END:

**** Compare "proposition" and "assertion"

**** Answer

- A proposition is a statement in either a natural or formal language for which it
  makes sense to ask whether it is true or false.
- An assertion is a statement that one claims to be true.

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 23cfea63-807b-4963-9bdb-5ca8d438eb47
:END:

**** What is the general structure of Spivak's proof?

**** Answer

The general structure is:
#+begin_src org
<Assertion>
- Proof:

  1. <Assertion>
     - Proof: ðŸžŽ

  2. <Assertion>
     - Proof: ðŸžŽ

  â€¦

  n. â– 
     - Proof: ðŸžŽ
#+end_src

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: ce084689-6d8f-4b39-9150-6717ffdaed87
:END:

**** Explain

1. Assertion: If fâ€²(x) > 0 for all x in an interval I, then f is increasing on I.
   - Proof:

     1. Assertion: It suffices to assume that a and b are points in I (1.1) and a < b
        (1.2) and prove that f(b) > f(a).
        - Proof: By the definition of an increasing function.

     2. Assertion: There exists some x âˆˆ (a, b) such that fâ€²(x) = (f(b) âˆ’ f(a)) / (b
        âˆ’ a).
        - Proof: By assumptions (1.1) and (1.2), the hypothesis that f is
          differentiable on I, and the Mean Value Theorem.

     3. Assertion: fâ€²(x) > 0 for all x âˆˆ (a, b).
        - Proof: By the hypothesis of the corollary and assumption (1.1).

     4. Assertion: (f(b) âˆ’ f(a)) / (b âˆ’ a) > 0.
        - Proof: By steps 2 and 3.

     5. â– 
        - Proof: Assumption 1.2 implies b âˆ’ a > 0, so step 4 implies f(b) âˆ’ f(a) > 0,
          which implies f(b) > f(a). By step 1, this proves the corollary.

**** Answer

** Hierarchical Structure

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 74f5811c-a7cc-48dc-a4dc-411972b99a6f
:END:

**** What is the best way to eliminate errors?

**** Answer

#+begin_quote
The best way to eliminate errors is to imagine a curious child sitting beside
you. Every time you write an assertion, the child asks, "Why?"
#+end_quote

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: e0bc0ca9-422f-4439-b8fd-1171be6d972a
:END:

**** How much detail is needed?

**** Answer

#+begin_quote
How much detail is necessary? For example, why do assumption 1.1 and the hypothesis
of the corollary, which asserts that f is differentiable on I, imply that f is
differentiable on [a, b]? The proof assumes that if a and b are in the interval I,
then [a, b] is a subset of I. Should this be mentioned?

If you are writing the proof to convince someone else that the theorem is correct,
the level of detail depends on the reader's sophistication. A beginning student needs
more guidance than a mathematician.

If you are writing the proof to ensure the theorem's correctness for yourself, the
answer is straightforward: if a statement's truth is not entirely obvious or if you
suspect there is the slightest possibility it may be incorrect, more detail is
needed.

When writing a proof, you believe the theorem to be true. To avoid errors, you must
be ruthlessly suspicious of everything you believe. Otherwise, your natural desire to
confirm what you already believe will cause you to overlook gaps in the proof, and
every gap could hide an error that renders the entire result incorrect.
#+end_quote

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: e3ad7f32-33bc-4a5a-bfec-d463386ec7c2
:END:

**** How can more details be added?

**** Answer

#+begin_quote
Our proof of step 2 is a prose paragraph. As with any prose proof, adding more detail
makes it harder to follow.

In traditional mathematical writing, the only solution would be to state and prove
the step as a separate lemma. However, making every such subproof a lemma would
overwhelm the main results with a flood of lemmas.

With structured proofs, there is a simple solution: replace the paragraph with a
structured proof.
#+end_quote

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 45dfc6c5-190b-42fd-853a-46111b95e83d
:END:

**** machine-checkable proofs?

**** Answer

#+begin_quote
Formalizing mathematics is straightforward, but writing formal, machine-checkable
proofs is challenging. It will be decades before mechanical proof checkers are
advanced enough that writing a machine-checked proof is as easy as writing a careful
informal proof. Until then, mathematicians have little incentive to write formal
proofs.
#+end_quote

** Experience
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: c77f93f5-63cf-4178-a427-10dd44430959
:END:

*** Why is enforcing rigor necessary?

*** Answer

#+begin_quote
As a computer scientist educated as a mathematician, I discovered structured proofs
through my work on concurrent (multiprocess) algorithms.

These algorithms can be subtle and difficult to get right; their correctness proofs
require a level of precision and rigor unfamiliar to most mathematicians (and many
computer scientists).

A missing hypothesis, such as a set being nonempty, may be a trivial omission in a
mathematical theorem but can indicate a serious bug in an algorithm.

Proofs of algorithms are often mathematically shallow but complex, requiring many
details to be verified. With traditional prose proofs, I found it impossible to
ensure I had not overlooked some detail.

Computer science offers a standard approach to managing complexity: hierarchical
structure. Structured proofs were therefore an obvious solution.
#+end_quote
