* How to Write a 21st Century Proof
:PROPERTIES:
:ID:       d8e71b6f-c3b0-411d-8bd8-b7a45eec561a
:END:

** License

Q&A about Erlang Â© 2025 by Pierre-Henry FROHGING is licensed under Creative Commons
Attribution-ShareAlike 4.0 International. To view a copy of this license, visit
https://creativecommons.org/licenses/by-sa/4.0/

** Use

1. Open Emacs.
2. Install ~total-recall~ (https://melpa.org/#/total-recall).
3. ~M-x total-recall~

** Contribute

1. Fork the repo.
2. Change it.
3. Send a pull request.

** Resources

- https://lamport.azurewebsites.net/pubs/proof.pdf

** Introduction
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: aa100eb2-93e7-4a97-bee5-ddbcdd8668fb
:END:

*** How to make proofs easier to understand?

*** Answer

1. It requires only the simple application of two principles: structure and naming.
2. Naming makes clear:
   1. Which assertion is new or justifying a previous assertion.
   2. Which assertion is obviously true or is about to be proved.
3. Structuring allows us to add as much detailed explanation as we like without
   obscuring the larger picture.

** Example
*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 9272bd8a-0d21-4a3e-a02c-c0b0d05ddce1
:END:

**** Compare "proposition" and "assertion"

**** Answer

- A proposition is a statement in either a natural or a formal language, for which it
  makes sense to ask whether it is either true or false.

- An assertion is a statement which one claims to be true.

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 23cfea63-807b-4963-9bdb-5ca8d438eb47
:END:

**** What is the general shape of Spivak's proof?

**** Answer

The general shape is:
#+begin_src org
<Assertion>
Proof:

1. <Assertion>
   Proof: ðŸžŽ

2. <Assertion>
   Proof: ðŸžŽ

â€¦

n. â– 
   Proof: ðŸžŽ
#+end_src

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: ce084689-6d8f-4b39-9150-6717ffdaed87
:END:

**** Explain

1. Assertion: if fâ€²(x) > 0 for all x in an interval I, then f is increasing on I.
   - Proof:

     1. Assertion: it suffices to assume that a and b are points in I (1.1) and a < b (1.2) and
        prove that f(b) > f(a).
        - Proof: by the definition of an increasing function.

     2. Assertion: There exists some x âˆˆ (a, b) such that: fâ€²(x) = (f(b) âˆ’ f(a)) / (b âˆ’ a)
        - Proof: by assumptions (1.1) and (1.2), the hypothesis that f is
          differentiable on I, and the Mean Value Theorem.

     3. Assertion: fâ€²(x) > 0 for all x âˆˆ (a, b)
        - Proof: by the hypothesis of the corollary and assumption (1.1).

     4. Assertion: (f(b) âˆ’ f(a)) / (b âˆ’ a) > 0
        - Proof: By 2 and 3.

     5. â– 
        - Proof: Assumption 1.2 implies b âˆ’ a > 0, so 4 implies f(b) âˆ’ f(a) > 0,
          which implies f(b) > f(a). By 1, this proves the corollary.

**** Answer

** Hierarchical Structure

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 74f5811c-a7cc-48dc-a4dc-411972b99a6f
:END:

**** What is the best way to eliminate errors?

**** Answer

#+begin_quote
The best way I know to eliminate errors is to imagine that there is a curious child
sitting next to us. Every time we write an assertion, the child asks: Why?
#+end_quote

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: e0bc0ca9-422f-4439-b8fd-1171be6d972a
:END:

**** How much details are needed?

**** Answer

How much detail is necessary? For example, why do 1.1 and the hypothesis of the
corollary, which asserts that f is differentiable on I, imply that f is
differentiable on [a, b]? The proof is assuming the fact that a and b in the interval
I implies that [a, b] is a subset of I. Should this also be mentioned?

If you are writing the proof to show someone else that the theorem is correct, then
the answer depends on the sophistication of the reader.  A beginning student needs
more help understanding a proof than does a mathematician.

If you are writing the proof for yourself to make sure that the theorem
is correct, then the answer is simple: if the truth of a statement is not
completely obvious, or if you suspect that there may be just the slightest
possibility that it is not correct, then more detail is needed.

When you write a proof, you believe the theorem to be true. The only way to avoid
errors is to be ruthlessly suspicious of everything you believe. Otherwise, your
natural desire to confirm what you already believe to be true will cause you to miss
gaps in the proof; and every gap could hide an error that makes the entire result
wrong.

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: e3ad7f32-33bc-4a5a-bfec-d463386ec7c2
:END:

**** How to add more details?

**** Answer

Our proof of step 2 is a prose paragraph. As with any prose proof, every
detail we add to it makes it harder to follow.

In ordinary mathematical writing, the only solution to this problem would be to state
and prove the step as a separate lemma. However, making each such subproof a lemma
would submerge the interesting results in a sea of lemmas.

With structured proofs there is a simple solution: replace the paragraph with a
structured proof.

*** Exercise
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: 45dfc6c5-190b-42fd-853a-46111b95e83d
:END:

**** How far are we to write machine checkable proofs instead of non-checkable proofs?

**** Answer

Formalizing mathematics is easy, but writing formal, machine-checkable proofs is
not. It will be decades before mechanical proof checkers are good enough that writing
a machine-checked proof is no harder than writing a careful informal proof. Until
then, there is little reason for a mathematician to write formal mathematics.

** Experience
:PROPERTIES:
:TYPE: b0d53cd4-ad89-4333-9ef1-4d9e0995a4d8
:ID: c77f93f5-63cf-4178-a427-10dd44430959
:END:

*** Why enforcing rigor is necessary?

*** Answer

#+begin_quote
I am a computer scientist who was educated as a mathematician. I discovered
structured proofs through my work on concurrent (multiprocess) algorithms.

These algorithms can be quite subtle and hard to get right; their correctness proofs
require a degree of precision and rigor unknown to most mathematicians (and many
computer scientists).

A missing hypothesis, such as that a set must be nonempty, which is a trivial
omission in a mathematical theorem, can mean a serious bug in an algorithm.

Proofs of algorithms are most often mathematically shallow but complicated, requiring
many details to be checked. With traditional prose proofs, I found it impossible to
make sure that I had not simply forgotten to check some detail.

Computer science offers a standard way to handle complexity: hierarchical
structure. Structured proofs were therefore an obvious solution.
#+end_quote
